import { DMMF } from "@prisma/generator-helper";
import { MermaidWriter } from "./MermaidWriter";
import { DescriptionWriter } from "./DescriptionWriter";
import { MapUtil } from "../utils/MapUtil";
import { PrismaUtil } from "../utils/PrismaUtil";

export namespace MarkdownWriter {
    export const write = (
        schema: DMMF.Datamodel,
        config?: Record<string, string | string[] | undefined>,
    ): string => {
        const dict: Map<string, IChapter> = new Map();
        const modelList: DMMF.Model[] = schema.models.filter(
            (model) => !isHidden(model),
        );

        // @NAMESPACE
        for (const model of modelList) {
            const tags: string[] = takeTags("namespace")(model);
            if (tags.length === 0) {
                const basic = MapUtil.take(dict)("default", () => ({
                    name: "default",
                    descriptions: new Set(),
                    diagrams: new Set(),
                }));
                basic.descriptions.add(model);
                basic.diagrams.add(model);
            } else
                for (const name of tags) {
                    const section = MapUtil.take(dict)(name, () => ({
                        name,
                        descriptions: new Set(),
                        diagrams: new Set(),
                    }));
                    section.descriptions.add(model);
                    section.diagrams.add(model);
                }
        }

        // @DESCRIBE
        for (const model of modelList)
            for (const name of takeTags("describe")(model))
                MapUtil.take(dict)(name, () => ({
                    name,
                    descriptions: new Set(),
                    diagrams: new Set(),
                })).descriptions.add(model);

        // @ERD
        for (const model of modelList)
            for (const name of takeTags("erd")(model))
                MapUtil.take(dict)(name, () => ({
                    name,
                    descriptions: new Set(),
                    diagrams: new Set(),
                })).diagrams.add(model);

        const title: string =
            typeof config?.title === "string"
                ? config.title
                : "Prisma Markdown";
        const preface: string = [
            `# ${title}`,
            "> Generated by [`prisma-markdown`](https://github.com/samchon/prisma-markdown)",
            "",
            ...[...dict.keys()].map((name) => `- [${name}](#${name})`),
        ].join("\n");
        return (
            preface +
            "\n\n" +
            [...dict.values()]
                .filter((s) => !!s.descriptions.size)
                .map(writeChapter)
                .join("\n\n\n")
        );
    };

    const takeTags =
        (kind: "namespace" | "describe" | "erd") =>
        (model: DMMF.Model): string[] => [
            ...new Set(
                PrismaUtil.tagValues(kind)(model).map(
                    (str) => str.split(" ")[0],
                ),
            ),
        ];

    const isHidden = (model: DMMF.Model): boolean =>
        model.documentation?.includes("@hidden") ?? false;

    const writeChapter = (chapter: IChapter): string =>
        [
            `## ${chapter.name}`,
            MermaidWriter.write([...chapter.diagrams]),
            "",
            [...chapter.descriptions].map(DescriptionWriter.table).join("\n\n"),
        ].join("\n");
}

interface IChapter {
    name: string;
    descriptions: Set<DMMF.Model>;
    diagrams: Set<DMMF.Model>;
}
